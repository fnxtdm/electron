From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lin Cheng <lin_cheng@dell.com>
Date: Fri, 16 Apr 2021 03:01:57 -0700
Subject: fix use openssl shared library replace boringssl


diff --git a/BUILD.gn b/BUILD.gn
index 99192976f2bdfd900240aa58b8989fe2c9d8c771..7fba955cbdf4a030794558c15a1b530ffd6e1f5c 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -138,11 +138,11 @@ config("node_internal_config") {
   if (node_module_version != "") {
     defines += [ "NODE_MODULE_VERSION=" + node_module_version ]
   }
-  if (is_component_build) {
+  #if (is_component_build) {
     defines += [
       "NODE_SHARED_MODE",
     ]
-  }
+  #}
 
   if (target_cpu == "x86") {
     node_arch = "ia32"
@@ -187,7 +187,7 @@ config("node_internal_config") {
   }
 }
 
-component("node_lib") {
+shared_library("node_lib") {
   deps = [
     ":node_js2c",
     "deps/cares",
@@ -259,7 +259,11 @@ component("node_lib") {
   }
 
   if (node_use_openssl) {
-    deps += [ "//third_party/boringssl" ]
+    libs += [
+      "ssl",
+      "crypto"
+    ]
+    #deps += [ "//third_party/boringssl" ]
     sources += [
       "src/node_crypto.cc",
       "src/node_crypto.h",
diff --git a/lib/dns.js b/lib/dns.js
index 92b70c73effbf299969a3853ec5a04ec41eccfb9..ac91a1609fc9eb01c27b8c915d5ac71c0799af4a 100644
--- a/lib/dns.js
+++ b/lib/dns.js
@@ -145,7 +145,8 @@ function lookup(hostname, options, callback) {
   req.oncomplete = all ? onlookupall : onlookup;
 
   const err = cares.getaddrinfo(
-    req, toASCII(hostname), family, hints, verbatim
+    req, hostname, family, hints, verbatim
+    //req, toASCII(hostname), family, hints, verbatim
   );
   if (err) {
     process.nextTick(callback, dnsException(err, 'getaddrinfo', hostname));
@@ -224,7 +225,8 @@ function resolver(bindingName) {
     req.hostname = name;
     req.oncomplete = onresolve;
     req.ttl = !!(options && options.ttl);
-    const err = this._handle[bindingName](req, toASCII(name));
+    //const err = this._handle[bindingName](req, toASCII(name));
+    const err = this._handle[bindingName](req, name);
     if (err) throw dnsException(err, bindingName, name);
     return req;
   }
diff --git a/lib/url.js b/lib/url.js
index 735390dfd2e59b1bf91871bf63e04ad317606ed9..286f9bd9fd84e052417e1054b5a7857067e0288f 100644
--- a/lib/url.js
+++ b/lib/url.js
@@ -386,7 +386,7 @@ Url.prototype.parse = function parse(url, parseQueryString, slashesDenoteHost) {
 
       // Use lenient mode (`true`) to try to support even non-compliant
       // URLs.
-      this.hostname = toASCII(this.hostname, true);
+      // this.hostname = toASCII(this.hostname, true);
     }
 
     const p = this.port ? ':' + this.port : '';
diff --git a/src/async_wrap.h b/src/async_wrap.h
index 1248323ac5c0af2ac3cb219d6b9106ee7a90427b..1c55b9b413a449bb8d1b446b867cd7983b8f9bd9 100644
--- a/src/async_wrap.h
+++ b/src/async_wrap.h
@@ -26,6 +26,7 @@
 
 #include "base_object.h"
 #include "v8.h"
+#include "node.h"
 
 #include <cstdint>
 
@@ -100,7 +101,7 @@ namespace node {
 class Environment;
 class DestroyParam;
 
-class AsyncWrap : public BaseObject {
+class NODE_EXTERN AsyncWrap : public BaseObject {
  public:
   enum ProviderType {
 #define V(PROVIDER)                                                           \
diff --git a/src/env.h b/src/env.h
index a5c72b6c145feedd624f7b6e407617ab295ad3bb..dc339d5eeb173231c50bf5011ae73f8edc96aea1 100644
--- a/src/env.h
+++ b/src/env.h
@@ -830,7 +830,7 @@ class CleanupHookCallback {
   uint64_t insertion_order_counter_;
 };
 
-class Environment : public MemoryRetainer {
+class NODE_EXTERN Environment : public MemoryRetainer {
  public:
   Environment(const Environment&) = delete;
   Environment& operator=(const Environment&) = delete;
diff --git a/src/node_internals.h b/src/node_internals.h
index 294bed9175125bbd544c7aa7df4229d182ca442d..b65b6576c0a7014d82cde5764246931af26a2c38 100644
--- a/src/node_internals.h
+++ b/src/node_internals.h
@@ -90,7 +90,7 @@ void PrintCaughtException(v8::Isolate* isolate,
                           v8::Local<v8::Context> context,
                           const v8::TryCatch& try_catch);
 
-void ResetStdio();  // Safe to call more than once and from signal handlers.
+NODE_EXTERN void ResetStdio();  // Safe to call more than once and from signal handlers.
 void SignalExit(int signo);
 #ifdef __POSIX__
 void RegisterSignalHandler(int signal,
@@ -325,7 +325,7 @@ void SetIsolateCreateParamsForNode(v8::Isolate::CreateParams* params);
 
 #if HAVE_INSPECTOR
 namespace profiler {
-void StartProfilers(Environment* env);
+NODE_EXTERN void StartProfilers(Environment* env);
 }
 #endif  // HAVE_INSPECTOR
 
diff --git a/src/node_native_module_env.h b/src/node_native_module_env.h
index f662c67be50d404ee5b6cf6e2b8dd5991c59e723..792ac970971b9ebe13f62294a2c0fdc6c98d9410 100644
--- a/src/node_native_module_env.h
+++ b/src/node_native_module_env.h
@@ -3,6 +3,7 @@
 
 #if defined(NODE_WANT_INTERNALS) && NODE_WANT_INTERNALS
 
+#include "node.h"
 #include "node_native_module.h"
 
 namespace node {
@@ -12,7 +13,7 @@ namespace native_module {
 
 extern const bool has_code_cache;
 
-class NativeModuleEnv {
+class NODE_EXTERN NativeModuleEnv {
  public:
   static void Initialize(v8::Local<v8::Object> target,
                          v8::Local<v8::Value> unused,
diff --git a/src/node_options.h b/src/node_options.h
index be577703740548fa63d31e7a97ed9cd8427ba9e9..32c50202164d4b93385fdc4ad860b66947f7786a 100644
--- a/src/node_options.h
+++ b/src/node_options.h
@@ -59,7 +59,7 @@ struct InspectPublishUid {
 // to keep them separate since they are a group of options applying to a very
 // specific part of Node. It might also make more sense for them to be
 // per-Isolate, rather than per-Environment.
-class DebugOptions : public Options {
+class NODE_EXTERN DebugOptions : public Options {
  public:
   DebugOptions() = default;
   DebugOptions(const DebugOptions&) = default;
diff --git a/src/util.h b/src/util.h
index eb214a880feba5007d08cea750ddc2462b4f78a2..20502e8d68897b83415e147ad2cfd7e0d98537d9 100644
--- a/src/util.h
+++ b/src/util.h
@@ -47,6 +47,8 @@
 #include <unordered_map>
 #include <utility>
 
+#include "node.h"
+
 #ifdef __GNUC__
 #define MUST_USE_RESULT __attribute__((warn_unused_result))
 #else
@@ -116,7 +118,7 @@ struct AssertionInfo {
 };
 [[noreturn]] void Assert(const AssertionInfo& info);
 [[noreturn]] void Abort();
-void DumpBacktrace(FILE* fp);
+NODE_EXTERN void DumpBacktrace(FILE* fp);
 
 // Windows 8+ does not like abort() in Release mode
 #ifdef _WIN32
